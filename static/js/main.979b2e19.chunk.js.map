{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["sampleText","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","input","output","myMarkdown","bind","assertThisInitialized","handleChange","markdown","__html","marked","breaks","event","newOutput","target","value","setState","console","log","react_default","a","createElement","className","id","onChange","dangerouslySetInnerHTML","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qRAQMA,SAAa,27BA8EFC,cArDf,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,MAASX,EACTY,OAAUT,EAAKU,WAAWb,IAE5BG,EAAKU,WAAaV,EAAKU,WAAWC,KAAhBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KAClBA,EAAKa,aAAeb,EAAKa,aAAaF,KAAlBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KAPHA,0EAURc,GACT,MAAO,CAACC,OAAQC,IAAOF,EAAU,CAACG,QAAQ,0CAG/BC,GACX,IAAMC,EAAYhB,KAAKO,WAAWQ,EAAME,OAAOC,OAC/ClB,KAAKmB,SAAS,CACZd,MAAOU,EAAME,OAAOC,MACpBZ,OAAQU,IAEVI,QAAQC,IAAI,UAAYrB,KAAKI,MAAMC,OACnCe,QAAQC,IAAI,UAAYrB,KAAKI,MAAME,yCAMnC,OACEgB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAEbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,iCAGFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAEbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,YAAUE,GAAG,SAASR,MAAOlB,KAAKI,MAAMC,MAAOsB,SAAU3B,KAAKU,gBAGhEY,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,OAAKE,GAAG,UAAUE,wBAAyB5B,KAAKI,MAAME,mBA5ChDuB,aCpBEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOd,EAAAC,EAAAC,cAACa,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.979b2e19.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport marked from \"marked\";\nimport './App.css';\n\n\n/*a header (H1 size), a sub header (H2 size), \na link, inline code, a code block, a list item, a blockquote, \nan image, and bolded text*/\nconst sampleText = \"# Markdown\"\n+\"\\n\\n## a simple markup language for writing text that is readable as-is\"\n+ \"\\n\\nMarkdown uses special characters to convey additional meaning and formatting for text\"\n+  \"\\n\\nWith two asterisks you can bold a word.  **This** is bold. One asterisk is for *italics.*\"\n+ \"\\n\\nWith numbers you can write an ordered list\"\n+ \"\\n\\n1. Bread \\n2. Milk \\n3. Eggs\"\n+ \"\\n\\nAnd with * you can make a bulleted list: \\n* no order \\n* to this\"\n+ \"\\n\\nI can even quote Shakespeare:\"\n+ \"\\n\\n>There is nothing either good or bad, but thinking makes it so.\"\n+ \"\\n>(Act II, Scene II)\"\n+ \"\\n\\nBut of course, markdown is especially good for documenting code by using backticks `let x = 0`\"\n+ \"\\n\\nCode block uses three back-ticks\"\n+ \"\\n\\n```\"\n+ \"\\nmyMarkdown(markdown) {\"\n+ \"\\n  return {__html: marked(markdown)};\"\n+ \"\\n}\"\n+ \"\\n```\"\n+ \"\\n\\nHere is an image!\"\n+ \"\\n\\n![Makdown Image](https://visualpharm.com/assets/11/Markdown-595b40b75ba036ed117d6671.svg)\"\n+ \"\\n\\n[Wikipedia](https://en.wikipedia.org/wiki/Markdown) has great article including its history\"\n+ \"\"\n;\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      \"input\": sampleText,\n      \"output\": this.myMarkdown(sampleText)\n    };\n    this.myMarkdown = this.myMarkdown.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  \n  myMarkdown(markdown) {\n    return {__html: marked(markdown, {breaks: true})};\n  } \n  \n  handleChange(event) {\n    const newOutput = this.myMarkdown(event.target.value);\n    this.setState({\n      input: event.target.value,\n      output: newOutput\n    });\n    console.log(\"Input: \" + this.state.input);\n    console.log(\"Output:\" + this.state.output);\n  }\n  \n  \n  \n  render() {\n    return (\n      <div className=\"App\">\n\n        <header className=\"App-header\">\n          <h1>Markdown Previewer</h1>\n        </header>\n\n        <div className=\"previewer\">\n\n          <div className=\"prevwSect\">\n            <h3>Type Markdown</h3>\n            <textarea id=\"editor\" value={this.state.input} onChange={this.handleChange}></textarea>\n          </div>\n          \n          <div className=\"prevwSect\">\n            <h3>Preview</h3>\n            <div id=\"preview\" dangerouslySetInnerHTML={this.state.output}></div>\n          </div>\n\n        </div>\n      </div>\n      );\n    }\n  }\n  \n  \n  export default App;\n  \n  \n  ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}